dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+stat(line="rm")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = Distance, y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes(x=Distance), aes_string(y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 1,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("hi"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_. 2016.  "),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("`Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_. 2016.`"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_2016"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_2016"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)+ggtitle(paste(input$x))
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_2016"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)+ggtitle(paste(input$x), "by Relative Distance")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_2016"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)+ggtitle(paste(input$x),"by Relative Distance")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_2016"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)+ggtitle("by Relative Distance")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_2016"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) +geom_smooth(method='lm', formula= y~x)+ggtitle(input$x,"by Relative Distance")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_2016"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)+ggtitle("by Relative Distance")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Gabon Data"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Animal", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
helpText("Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. _Journal of Applied Ecology_2016"),
), # close the first box
box(title = "Plot of Relative Abundance versus Distance to Nearest Village", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$x)) + geom_point(size=4) + theme_light(base_size = 18)+geom_smooth(method='lm', formula= y~x)+ggtitle(input$x,"by Relative Distance")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
